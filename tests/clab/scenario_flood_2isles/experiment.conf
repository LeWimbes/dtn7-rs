# BEWARE: this config is sourced by bash, shell syntax rules apply!

NAME=flood_2isles

# animated scenarios must have the link to the mobility model to a file in /shared
# autostart should be enabled for the movement
# node mapping must fit the scenario
# movements can be generated using bonnmotion
SCENARIO=nodes.xml

# optional core automator recording, will be played in a loop
AUTOMATOR=nodes.pos

GUI=0

MONITOR_PIDSTAT=0
# monitor specific process name (default, all on node -> no graph plotting!)
MONITOR_PIDSTAT_PARAMS="dtnd"

MONITOR_NET=0
# interface to monitor (default: all interfaces up)
MONITOR_NET_PARAMS="eth0"

MONITOR_XY=0
# Delay in seconds between recordings
#MONITOR_XY_PARAMS="5"

MONITOR_CONTACTS=0
# Delay in seconds between recordings
#MONITOR_CONTACTS_PARAMS="5"

# commands to execute at beginning of simulation
#START_EXEC=("echo started > started.log" "echo second > second.log")

START_DAEMONIZED=('dtnd -C mtcp -n $(hostname) -r epidemic -j 3s -i 2s -p 5s -d')

# usually commands started at the beginning of the simulation are put here for shutdown
SHUTDOWN_PROCS="dtnd"

# let simulation warm up for a period of time if needed
#WARMUP=5

# run simulation for this long
# without RUNTIME simulation will run until a shutdown.txt is found in the shared volume
RUNTIME=60

#COLLECT_EVERYTHING=1

# Called right after initializing the simulation, prior to any monitoring or START_EXEC/START_DAEMONIZED
pre() {
    echo "pre hook - results in $1"
    cp /shared/bin/* /usr/local/bin
    cp /shared/recv_logger /usr/local/bin
}

# Called right after starting monitoring and/or START_EXEC/START_DAEMONIZED
start() {
    export NUM_BUNDLES=1800
    cexec n10 "nohup dtntrigger -v -e dtn://global/~txt -c /usr/local/bin/recv_logger > nohup.dtntrigger.log 2>&1 & sleep 0.1"
    cexec n7 "nohup dtntrigger -v -e dtn://global/~txt -c /usr/local/bin/recv_logger > nohup.dtntrigger.log 2>&1 & sleep 0.1"
    cexec n3 "nohup dtntrigger -v -e dtn://global/~txt -c /usr/local/bin/recv_logger > nohup.dtntrigger.log 2>&1 & sleep 0.1"

    cexec n2 "time for i in $(seq 1 1 $NUM_BUNDLES); do echo 'The quick brown fox jumps over the lazy dog' | dtnsend -r dtn://global/~txt && echo 1 ; done 2>&1 > sent.log"
}

# Called after simulation time is over but prior to collecting logs
post() {
    echo "post hook - results in $1"
    #cea "dtnquery bundles | wc -l" 2>&1 > $1/bundles.log
}

# Called after logs have been collected from all nodes
analyze() {
    echo "analyze hook - results in $1"
    for i in $(ls -d  $1/*/); do echo -n "$(basename $i) "; rg "Dispatching" $i | wc -l ; done > $1/dispatching.log

    RECEIVED_10=$(cat $1/n10/recv.log | wc -l)
    RECEIVED_7=$(cat $1/n7/recv.log | wc -l)
    RECEIVED_3=$(cat $1/n3/recv.log | wc -l)

    cat $1/dispatching.log
    cat $1/dispatching.log | cut -d ' ' -f 2 | sort | uniq -c
    UNIQ_BUDNLES_IN_STORE=$(cat $1/dispatching.log | cut -d ' ' -f 2 | sort | uniq -c | wc -l)

    if [ $RECEIVED_10 -eq $NUM_BUNDLES ] && [ $RECEIVED_7 -eq $NUM_BUNDLES ] && [ $RECEIVED_3 -eq $NUM_BUNDLES ] && [ $UNIQ_BUDNLES_IN_STORE -eq 1 ]; then
        echo "EXPERIMENT RESULT: Success | Sent: 1800, Received: n3: $RECEIVED_3, n7: $RECEIVED_7, n10: $RECEIVED_10 | Uniq bundles in store: $UNIQ_BUDNLES_IN_STORE"
    else
        echo "EXPERIMENT RESULT: Failed | Sent: 1800, Received: n3: $RECEIVED_3, n7: $RECEIVED_7, n10: $RECEIVED_10  | Uniq bundles in store: $UNIQ_BUDNLES_IN_STORE"
    fi
}