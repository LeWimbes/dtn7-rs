# BEWARE: this config is sourced by bash, shell syntax rules apply!

NAME=flood

# animated scenarios must have the link to the mobility model to a file in /shared
# autostart should be enabled for the movement
# node mapping must fit the scenario
# movements can be generated using bonnmotion
SCENARIO=three_nodes.xml

# optional core automator recording, will be played in a loop
AUTOMATOR=three_nodes.pos

GUI=0

MONITOR_PIDSTAT=1
# monitor specific process name (default, all on node -> no graph plotting!)
MONITOR_PIDSTAT_PARAMS="dtnd"

MONITOR_NET=1
# interface to monitor (default: all interfaces up)
MONITOR_NET_PARAMS="eth0"

MONITOR_XY=1
# Delay in seconds between recordings
#MONITOR_XY_PARAMS="5"

MONITOR_CONTACTS=1
# Delay in seconds between recordings
#MONITOR_CONTACTS_PARAMS="5"

# commands to execute at beginning of simulation
#START_EXEC=("echo started > started.log" "echo second > second.log")


#START_DAEMONIZED=('dtnd -C tcp -O tcp:refuse-existing-bundles=true -n $(hostname) -j 3s -i 2s -p 5s --parallel-bundle-processing -d')
#START_DAEMONIZED=('dtnd -C tcp -n $(hostname) -j 3s -i 2s -p 5s --parallel-bundle-processing -d')
#START_DAEMONIZED=('dtnd -C tcp -n $(hostname) -j 3s -i 2s -p 5s -d')

# transmissions too slow, needs more time to complete
#START_DAEMONIZED=('dtnd -C http -n $(hostname) -j 3s -i 2s -p 5s -d')

# working as expected
#START_DAEMONIZED=('dtnd -C http -n $(hostname) -j 3s -i 2s -p 5s --parallel-bundle-processing -d')
START_DAEMONIZED=('dtnd -C mtcp -n $(hostname) -j 3s -i 2s -p 5s -d')

# usually commands started at the beginning of the simulation are put here for shutdown
SHUTDOWN_PROCS="dtnd"

# let simulation warm up for a period of time if needed
#WARMUP=5

# run simulation for this long
# without RUNTIME simulation will run until a shutdown.txt is found in the shared volume
RUNTIME=30

#COLLECT_EVERYTHING=1

# Called right after initializing the simulation, prior to any monitoring or START_EXEC/START_DAEMONIZED
pre() {
    echo "pre hook - results in $1"
    cp /shared/bin/* /usr/local/bin
    cp /shared/recv_logger /usr/local/bin
}

# Called right after starting monitoring and/or START_EXEC/START_DAEMONIZED
start() {
    export NUM_BUNDLES=1800
    cexec n3 "nohup dtntrigger -v -e txt -c /usr/local/bin/recv_logger > nohup.dtntrigger.log 2>&1 & sleep 0.1"
    cexec n1 "time for i in $(seq 1 1 $NUM_BUNDLES); do echo 'The quick brown fox jumps over the lazy dog' | dtnsend -r dtn://n3/txt && echo 1 ; done 2>&1 > sent.log"
}

# Called after simulation time is over but prior to collecting logs
post() {
    echo "post hook - results in $1"
}

# Called after logs have been collected from all nodes
analyze() {
    echo "analyze hook - results in $1"
    # collect number of sent messages and received messages
    SENT=$(rg --no-filename "Transmission of bundle requested" $1/*/*dtnd*.log | wc -l)
    RECEIVED=$(rg --no-filename "Received bundle for local delivery" $1/*/*dtnd*.log | wc -l)
    
    if [ $SENT -eq $RECEIVED ] ; then
        echo "EXPERIMENT RESULT: Success | tx: $SENT, rx: $RECEIVED"
    else 
        echo "EXPERIMENT RESULT: Failed | tx: $SENT, rx: $RECEIVED"
    fi
}